// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Task {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiToken {
  tokenId        String   @id @default(cuid())
  accessToken    String
  expirationDate DateTime
  refreshToken   String
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String
  givenName     String?
  lastName      String?
  slug          String         @unique
  email         String         @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  website       String?
  location      String?
  favoriteGames FavoriteGame[]
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  likedPosts    Review[]       @relation("LikedPosts")
  lists         List[]
  games         Game[]         @relation("PlayedGames")
  likedGames    Game[]         @relation("LikedGames")
  backlog       Game[]         @relation("BackloggedGames")
  ratings       Rating[]
  likedLists    List[]         @relation("LikedLists")

  password String?

  comments Comment[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id          String    @id @default(cuid())
  name        String
  description String?
  games       Game[]    @relation("Developed")
  country     Int?
  logo        String?
  slug        String    @unique
  founded     DateTime?
  timestamp   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  published   Game[]    @relation("Published")
  supported   Game[]    @relation("Supported")
}

// TODO: Add themes and genres to game model
model Game {
  id                 String         @id @default(cuid())
  name               String
  slug               String         @unique
  user_reviews       Review[]
  cover              String?
  first_release_date DateTime?
  developers         Company[]      @relation("Developed")
  publishers         Company[]      @relation("Published")
  supporting_devs    Company[]      @relation("Supported")
  genres             Genre[]
  tags               String[]
  artworks           Artwork[]
  screenshots        Screenshots[]
  listItems          ListItem[]
  users              User[]         @relation("PlayedGames")
  likedBy            User[]         @relation("LikedGames")
  backloggedBy       User[]         @relation("BackloggedGames")
  summary            String?
  platforms          Platform[]
  user_ratings       Rating[]
  alternate_names    String[]
  keywords           String[]
  FavoriteGames      FavoriteGame[]
  GameMode           GameMode[]
  updatedAt          DateTime?      @updatedAt
}

model GameMode {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  games     Game[]
}

model FavoriteGame {
  game        Game   @relation(fields: [gameid], references: [id])
  gameid      String
  rank        String
  favoritedBy User   @relation(fields: [userid], references: [id])
  userid      String

  @@id([userid, gameid])
}

model Artwork {
  id            String  @id @default(cuid())
  alpha_channel Boolean @default(false)
  animated      Boolean @default(false)
  height        Int // height of the image in pixels
  image_id      String  @unique // The ID of the image used to construct@unique an IGDB image link
  url           String // The website address (URL) of the item    
  width         Int // The width of the image in pixels
  game          Game    @relation(fields: [gameId], references: [id])
  gameId        String
}

model Screenshots {
  id            String  @id @default(cuid())
  alpha_channel Boolean @default(false)
  animated      Boolean @default(false)
  height        Int // height of the image in pixels
  image_id      String  @unique // The ID of the image used to construct@unique an IGDB image link
  url           String // The website address (URL) of the item    
  width         Int // The width of the image in pixels
  gameId        String
  game          Game    @relation(fields: [gameId], references: [id])
}

model Genre {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  games     Game[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// This is really more of a journal than a review
model Review {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String? // Users's review/thoughts on a game
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Game      Game     @relation(fields: [gameId], references: [id])
  gameId    String
  replay    Boolean  @default(false) // Is this a replay of a game?
  completed Boolean  @default(false) // Did user complete the game?
  likedBy   User[]   @relation("LikedPosts") //Users that liked the post
  rating    Float? // Rating at time of review (allows users to re-score games upon subsequent playthroughs)
  liked     Boolean  @default(false) // Did the user 'like' the game at the time of review? 
  logCount  Int? // How many times the author has logged this game already. For use in review slug

  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  Review    Review?  @relation(fields: [reviewId], references: [id])
  reviewId  String?
  List      List?    @relation(fields: [listId], references: [id])
  listId    String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  user   User   @relation(fields: [userId], references: [id])
  game   Game   @relation(fields: [gameId], references: [id])
  rating Float
  userId String
  gameId String

  @@id([userId, gameId])
}

model List {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  description String
  timestamp   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  tags        String[]
  games       ListItem[]
  ranked      Boolean    @default(false)

  likedBy User[] @relation("LikedLists")

  comments Comment[]
}

model ListItem {
  id          String   @id @default(cuid())
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId      String
  description String?
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      String
  createdAt   DateTime @default(now())
}

model Platform {
  id               String          @id @default(cuid()) // Hash of the object
  abbreviation     String? // An abbreviation of the platform name
  alternative_name String? // 	An alternative name for the platform
  created_at       DateTime        @default(now()) // Date this was initially added to the IGDB database
  generation       Int? // The generation of the platform
  name             String // The name of the platform
  platformLogo     PlatformLogo?   @relation(fields: [platformLogoId], references: [id]) //	Reference ID for Platform Logo //	The logo of the first Version of this platform
  platformLogoId   String?         @unique
  platformFamily   PlatformFamily? @relation(fields: [platformFamilyId], references: [id]) //	Reference ID for Platform Family //	The family of platforms this one belongs to
  platformFamilyId String?
  slug             String          @unique //	A url-safe, unique, lower-case version of the name
  summary          String? //	The summary of the first Version of this platform
  updated_at       DateTime        @updatedAt //	The last date this entry was updated in the IGDB database
  url              String? //	The website address (URL) of the item
  games            Game[]
}

model PlatformLogo {
  id            String    @id @default(cuid())
  alpha_channel Boolean   @default(false)
  animated      Boolean   @default(false)
  height        Int // height of the image in pixels
  image_id      String    @unique // The ID of the image used to construct@unique an IGDB image link
  url           String // The website address (URL) of the item    
  width         Int // The width of the image in pixels
  platform      Platform?
}

model PlatformFamily {
  id        String     @id @default(cuid()) // Hash of the object
  name      String //	The name of the platform family
  slug      String     @unique //	A url-safe, unique, lower-case version of the name
  platforms Platform[]
}
